import Head from 'next/head';
import styles from '../styles/Home.module.css';
import {
  AutoComplete,
  AutoCompleteInput,
  AutoCompleteItem,
  AutoCompleteList,
} from '@choc-ui/chakra-autocomplete';
import { FormControl, FormLabel, Box, Spinner } from '@chakra-ui/react';
import axios from 'axios';
import { useState, useRef, ChangeEvent } from 'react';
import debounce from '../lib/debounce';

function Home(): React.ReactElement {
  const [search, setSearch] = useState('');
  const [papers, setPapers] = useState([]);
  const lastQuery = useRef('');
  const inputRef = useRef<HTMLInputElement>(null);

  async function handleChange(event: ChangeEvent<HTMLInputElement>) {
    setPapers([]);

    const query = event.target.value;

    if (query) {
      const searchUrl = `/api/search?paperTitle=${query}`;

      lastQuery.current = searchUrl;

      setSearch(query);

      const debouncedRequest = debounce(async () => {
        const response = await axios.get(searchUrl);

        if (searchUrl === lastQuery.current) {
          const papers = response.data;
          setPapers(papers);
          console.log(papers);
        }
      });

      debouncedRequest();

      //setTimeout(async () => {
      //const response = await axios.get(searchUrl);

      //if (searchUrl === lastQuery.current) {
      //const papers = response.data;
      //setPapers(papers);
      //}
      //}, 500);
    } else {
      setSearch('');
      setPapers([]);
      return;
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Prot DB</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>

      <main className={styles.main}>
        <FormControl width="80%">
          <FormLabel>Search</FormLabel>
          <AutoComplete
            openOnFocus
            maxSuggestions={20}
            defaultValues={papers}
            suggestWhenEmpty={true}
            emptyState={
              <Box textAlign="center">
                {inputRef?.current?.value ? (
                  <Spinner />
                ) : (
                  <Box>Start typing your address for suggestions</Box>
                )}
              </Box>
            }
          >
            <AutoCompleteInput
              variant="outline"
              value={search}
              onChange={handleChange}
              ref={inputRef}
            />
            <AutoCompleteList>
              {papers.map((paper) => (
                <AutoCompleteItem
                  key={paper.pmid}
                  value={paper.title}
                />
              ))}
            </AutoCompleteList>
          </AutoComplete>
        </FormControl>
      </main>
    </div>
  );
}

export default Home;
