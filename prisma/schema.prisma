generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Classification2ndLay {
  pmid        Int         @unique(map: "PMID") @map("PMID")
  score       Decimal     @db.Decimal(8, 7)
  probability Decimal     @db.Decimal(8, 7)
  other__     Int
  otherTerms  String?     @db.VarChar(2000)
  known__     Int
  knownTerms  String?     @db.VarChar(2000)
  coverage    String      @db.VarChar(10)
  metadataPub MetadataPub @relation(fields: [pmid], references: [pmid], onDelete: Cascade, map: "fkMetadataPubPMID2ndLay")

  @@index([probability], map: "probability2nd")
  @@map("classification_2ndLay")
}

model Classification1stLay {
  pmid        Int         @unique(map: "PMID") @map("PMID")
  score       Decimal     @db.Decimal(8, 7)
  probability Decimal     @db.Decimal(8, 7)
  other__     Int
  otherTerms  String?     @db.VarChar(2000)
  known__     Int
  knownTerms  String?     @db.VarChar(2000)
  coverage    String      @db.VarChar(10)
  metadataPub MetadataPub @relation(fields: [pmid], references: [pmid], onDelete: Cascade, map: "fkMetadataPubPMID1stLay")

  @@index([probability], map: "probability")
  @@map("classifications_1stLay")
}

model GeneIDToPMID {
  pmid                   Int                    @map("PMID")
  geneID                 Int                    @map("geneIDs")
  metadataPub            MetadataPub            @relation(fields: [pmid], references: [pmid], onDelete: Cascade, map: "fkMetadataPubPMIDgeneIDs")
  geneIDToTaxInfoAccNumb GeneIDToTaxInfoAccNumb @relation(fields: [geneID], references: [geneID], onDelete: Cascade, map: "geneIDs_PMIDs_ibfk_2")

  @@id([pmid, geneID])
  @@index([geneID], map: "geneIDs_PMIDs_ibfk_2")
  @@map("geneIDs_PMIDs")
}

model GeneIDToTaxInfoAccNumb {
  geneID       Int            @id @map("geneIDs")
  orgTaxName   String?        @map("OrgTaxName") @db.VarChar(200)
  taxID        Int?           @map("TaxID")
  accNumb      String?        @map("AccNumb") @db.VarChar(2000)
  taxPath      TaxPath?       @relation(fields: [taxID], references: [taxID], onDelete: Cascade, map: "taxIDsAccNumb_ibfk_1")
  geneIDToPMID GeneIDToPMID[]

  @@index([taxID], map: "taxIDsAccNumb_ibfk_1")
  @@map("geneIDs_taxInfo_AccNumb")
}

model MetadataPub {
  pmid                 Int                   @id @map("PMID")
  title                String                @map("Titles") @db.VarChar(2000)
  abstract             String?               @map("Abstract") @db.VarChar(10000)
  pubDate              String?               @map("PubDate") @db.VarChar(15)
  yearPub              Int?                  @map("YearPub")
  lastAuthor           String?               @map("LastAuthor") @db.VarChar(30)
  journalAbbrev        String?               @map("Journal_Abbrev") @db.VarChar(70)
  journal              String?               @map("Journal") @db.VarChar(100)
  volume               String?               @map("Volume") @db.VarChar(30)
  issue                String?               @map("Issue") @db.VarChar(30)
  pages                String?               @map("Pages") @db.VarChar(30)
  languagePub          String?               @map("LanguagePub") @db.VarChar(30)
  citations            Int?                  @map("Citations")
  classification2ndLay Classification2ndLay?
  classification1stLay Classification1stLay?
  curationStatus       CurationStatus?       @relation("curationStatusTometadataPub")
  geneIDToPMID         GeneIDToPMID[]

  @@index([citations], map: "citations")
  @@index([yearPub], map: "yearPub")
  @@map("metadataPub")
}

model TaxPath {
  taxID                  Int                      @id @map("TaxID")
  orgLineage             String?                  @map("OrgLineage") @db.VarChar(3000)
  lineagePath            String?                  @map("LineagePath") @db.VarChar(3000)
  geneIDToTaxInfoAccNumb GeneIDToTaxInfoAccNumb[]
  taxIDToTaxName         TaxIDToTaxName?           @relation("taxID_taxNameTotaxPath")

  @@map("taxPath")
}

model CurationStatus {
  pmid           Int                            @unique(map: "PMID") @map("PMID")
  curationStatus curationStatus_curationStatus?
  metadataPub    MetadataPub                    @relation("curationStatusTometadataPub", fields: [pmid], references: [pmid], onDelete: Cascade, map: "fkMetadataPubPMIDcur")

  @@map("curationStatus")
}

model TaxIDToTaxName {
  taxID   Int     @unique(map: "TaxID") @map("TaxID")
  taxName String  @db.VarChar(200) @map("TaxName")
  taxPath TaxPath @relation("taxID_taxNameTotaxPath", fields: [taxID], references: [taxID], onDelete: Cascade, map: "taxIDsSplit_ibfk_1")

  @@map("taxID_taxName")
}

enum curationStatus_curationStatus {
  Created
  Curated_Negative @map("Curated Negative")
  Curated_Positive @map("Curated Positive")
}
